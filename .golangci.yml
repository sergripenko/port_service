# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 20

  # include test files or not, default is true
  tests: true

  # creators of build tags, all linters use it. Default is empty creators.
  build-tags:
    - functional
    - integration

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty creators, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs:
    - "db"
    - ".github"
    - "build"
    - "devops"
    - "types"
    - "pkg/pubsub"

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty creators, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - ".*\\_mock.go$"
    - "models_gen.go"
    - ".*\\_test.go$"
    - ".*\\.resolvers.go$"


  # output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  format: tab

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true


  # all available settings of specific linters
linters-settings:
  cyclop:
    max-complexity: 17
  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
      - github.com/davecgh/go-spew/spew
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true
  govet:
    # report about shadowed variables
    check-shadowing: false

    # Obtain type information from installed (to $GOPATH/pkg) package files:
    # golangci-lint will execute `go install -i` and `go test -i` for analyzed packages
    # before analyzing them.
    # By default this option is disabled and govet gets type information by loader from source code.
    # Loading from source code is slow, but it's done only once for all linters.
    # Go-installing of packages first time is much slower than loading them from source code,
    # therefore this option is disabled by default.
    # But repeated installation is fast in go >= 1.10 because of build caching.
    # Enable this option only if all conditions are met:
    #  1. you use only "fast" linters (--fast e.g.): no program loading occurs
    #  2. you use go >= 1.10
    #  3. you do repeated runs (false for CI) or cache $GOPATH/pkg or `go env GOCACHE` dir in CI.
    use-installed-packages: false
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 16
  gocritic:
    disabled-checks:
      - commentFormatting
  gosec:
    excludes:
      - G505 # Blocklisted import crypto/sha1: weak cryptographic primitive
      - G401 # Use of weak cryptographic primitive
      - G107 # Potential HTTP request made with variable url
      - G304 # Potential file inclusion via variable
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  lll:
    line-length: 140
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  misspell:
    locale: US
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  nestif:
    min-complexity: 6
  revive:
    rules:
      - name: exported # exported anything should have comment or be unexported
        disabled: true
  stylecheck:
    checks: # minus in the beginning excludes check
      - "all"
      - "-ST1000" # at least one file in a package should have a package comment
      - "-ST1003" # should not use underscores in package names
      - "-ST1019" # ST1019: package is being imported more than once
      - "-ST1021" # comment to struct should start with struct name
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unparam:
    # call graph construction algorithm (cha, rta). In general, use cha for libraries,
    # and rta for programs with main packages. Default is cha.
    algo: cha

    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false


linters:
  enable-all: true
  disable:
    - gocognit
    - dupword
    - deadcode
    - structcheck
    - varcheck
    - nosnakecase
    - contextcheck
    - interfacebloat
    - dupl
    - exhaustruct
    - varnamelen
    - funlen # function length (too much params), to enable we need major code refactoring
    - scopelint # deprecated, replaced with exportloopref
    - gomnd # we don't need it
    - interfacer # deprecated by owner, no alternative
    - ifshort # not useful
    - wrapcheck # tons of errors
    - tagliatelle # got 'marketplaceID' want 'marketplaceId', we don't need that
    - nlreturn # return with no blank line before
    - goerr113 # do not define dynamic errors, we need to enable it after key-wal error handling
    - exhaustivestruct # detects missing fields in struct
    - wsl
    - golint # deprecated, replaced by revive
    - godox
    - gofumpt # formatting
    - gci # formatting
    - godot # formatting
    - gochecknoglobals
    - maligned # deprecated, replaced by fieldalignment
    - errname
    - errorlint
  fast: false


issues:
  # List of regexps of issue texts to exclude, empty creators by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To creators all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - abcdef

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To creators all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same: 0
